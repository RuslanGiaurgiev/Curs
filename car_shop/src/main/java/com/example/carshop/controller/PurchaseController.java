package com.example.carshop.controller;

import com.example.carshop.model.User;
import com.example.carshop.service.PurchaseService;
import com.example.carshop.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;

@Controller
@RequestMapping("/purchases")
public class PurchaseController {

    @Autowired
    private PurchaseService purchaseService;

    @Autowired
    private UserService userService;

    @GetMapping("/buy/{carId}")
    @PreAuthorize("hasRole('USER')")
    public String showBuyForm(@PathVariable Long carId, Principal principal, Model model) {
        System.out.println("üõí –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID: " + carId);

        if (principal == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
            return "redirect:/auth/login";
        }

        User user = userService.findByEmail(principal.getName());
        if (user == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            return "redirect:/auth/login";
        }

        System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: " + user.getEmail() + " (ID: " + user.getId() + ")");

        model.addAttribute("carId", carId);
        model.addAttribute("user", user);

        System.out.println("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω: buy-car.html");
        return "buy-car";
    }

    @PostMapping("/buy")
    @PreAuthorize("hasRole('USER')")
    public String buyCar(@RequestParam Long carId, Principal principal, Model model) {
        System.out.println("üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID: " + carId);

        if (principal == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ");
            return "redirect:/auth/login";
        }

        User user = userService.findByEmail(principal.getName());
        if (user == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ");
            return "redirect:/auth/login";
        }

        System.out.println("üë§ –ü–æ–∫—É–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());

        try {
            purchaseService.createPurchase(user, carId);
            System.out.println("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
            return "redirect:/purchases/success";
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: " + e.getMessage());
            model.addAttribute("error", e.getMessage());
            return "redirect:/cars?error=" + e.getMessage();
        }
    }

    @GetMapping("/success")
    @PreAuthorize("hasRole('USER')")
    public String showSuccess(Principal principal, Model model) {
        System.out.println("üéâ –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏");

        if (principal == null) {
            return "redirect:/auth/login";
        }

        User user = userService.findByEmail(principal.getName());
        if (user != null) {
            var purchases = purchaseService.getPurchasesByUserId(user.getId());
            if (!purchases.isEmpty()) {
                model.addAttribute("lastPurchase", purchases.get(purchases.size() - 1));
                System.out.println("üì¶ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: " + purchases.get(purchases.size() - 1).getId());
            }
        }

        System.out.println("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω: purchase-success.html");
        return "purchase-success";
    }

    @GetMapping("/my")
    @PreAuthorize("hasRole('USER')")
    public String myPurchases(Principal principal, Model model) {
        System.out.println("üìã –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫");

        if (principal == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏");
            return "redirect:/auth/login";
        }

        User user = userService.findByEmail(principal.getName());
        if (user == null) {
            System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏");
            return "redirect:/auth/login";
        }

        System.out.println("üë§ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());

        var purchases = purchaseService.getPurchasesByUserId(user.getId());
        model.addAttribute("purchases", purchases);
        model.addAttribute("totalPurchases", purchases.size());

        System.out.println("üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: " + purchases.size());
        System.out.println("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω: user/purchases.html");

        return "user/purchases";
    }
}